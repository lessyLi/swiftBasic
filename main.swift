//
//  main.swift
//  swiftBasic
//
//  Created by MacBook on 30.03.2022.
//

import Foundation

//1. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç.

///–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
func isEvenNumber(_ number: Int) -> Bool {
    number.isMultiple(of: 2)
}

///–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π
func isAnotherEvenNumber(_ number: Int) -> Bool {
    if number % 2 != 0 {
        return false
    } else {
        return true
    }
}

//2. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–µ–ª–∏—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ 3.

///–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
func multiplyThreeNumber(_ number: Int) -> Bool {
    number.isMultiple(of: 3)
}

///–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π
func ismultiplyThreeNumber(_ number: Int) -> Bool {
    if number % 3 != 0 {
        return false
    } else {
        return true
    }
}

//3. –°–æ–∑–¥–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π –º–∞—Å—Å–∏–≤ –∏–∑ 100 —á–∏—Å–µ–ª.

var oneHundred = [Int]()

for i in 1...100 {
    oneHundred.append(i)
}

//4. –£–¥–∞–ª–∏—Ç—å –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤—Å–µ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3.

///–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
var oneAnotherHundred = [Int]()

for i in oneHundred {
    if i % 2 != 0 && i % 3 == 0 {
        oneAnotherHundred.append(i)
    }
}

///–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º –º–∞—Å—Å–∏–≤–æ–º
var trueIndex = 0
for i in oneHundred {
    if i % 2 == 0 || i % 3 != 0 {
        oneHundred.remove(at: trueIndex)
    } else {
        trueIndex += 1
    }
}

//5. * –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –º–∞—Å—Å–∏–≤ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏, –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–µ 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ Fn=Fn-1 + Fn-2.

func fibonachi(numberOne: Int, numberTwo: Int) -> Int {
    return numberOne + numberTwo
    }

var myFibonachi = [0,1]

for i in 0...1000 {
    let theNextNumber = fibonachi(numberOne: myFibonachi[i], numberTwo: myFibonachi[i + 1])
    myFibonachi.append(theNextNumber)
    if myFibonachi.count >= 50 {
        break
    }
}

//6. * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏.

var primeNumbers = [Int]()

for i in 2...1000 {
    var checkCounter = 0
    for j in 2...9 {
        if i % j == 0 && i != j {
            checkCounter -= 1
        } else {
            checkCounter += 1
        }
    if checkCounter == 8 {
        primeNumbers.append(i)
    }
    if primeNumbers.count == 100 {
        break
    }
    }
}

// MARK: - Ticket
struct Ticket {
    var count: Int
    var price: Int
    let country: Country
}

// MARK: - Country
struct Country {
    let name: String
}

// MARK: - errors
enum FlyErrors: Error {
    case unknownCountry
    case noTickets
    case notEnoughMoney
    case covidRestrictions
}

// MARK: - FlyFromRussia (–≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ throws)
final class FlyFromRussia {
    // –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
    var countries = [
        "Italy": Ticket(count: 0, price: 0, country: Country(name: "Italy")),
        "France": Ticket(count: 10, price: 800, country: Country(name: "France")),
        "Greece": Ticket(count: 15, price: 750, country: Country(name: "Greece")),
        "Turkey": Ticket(count: 78, price: 470, country: Country(name: "Spain")),
        "Germany": Ticket(count: 57, price: 640, country: Country(name: "Germany")),
        "Georgia": Ticket(count: 36, price: 540, country: Country(name: "Austria")),
        "Armenia": Ticket(count: 100, price: 400, country: Country(name: "Armenia")),
        "Mexico": Ticket(count: 0, price: 0, country: Country(name: "Mexico"))]
    // –ö—É–¥–∞ –ª–µ—Ç–∏–º?
    let country: String = ""
    // –°–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –¥–µ–Ω–µ–≥
    var myMoney = 600
    // –°–Ω—è—Ç—ã –ª–∏ –∫–æ–≤–∏–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?
    var isCovidOkay: Bool = false

    // –ü–æ–ª–µ—Ç–∏–º –ª–∏?
    func willIFly(country: String, isCovidOkay: Bool) -> (Country?, FlyErrors?) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≤–∏–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        guard isCovidOkay else {
            print("There are covid restrictions in \(country).")
            return (nil, FlyErrors.covidRestrictions)
        }
        // –ï—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
        guard let myCountry = countries[country] else {
            print("No information about \(country).")
            return (nil, FlyErrors.unknownCountry)
        }
        // –ï—Å—Ç—å –ª–∏ –±–∏–ª–µ—Ç—ã
        guard myCountry.count > 0 else {
            print("There are no tickets to \(country).")
            return (nil, FlyErrors.noTickets)
        }
        // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
        guard myMoney >= myCountry.price else {
            print("You don't have enough money for \(country).")
            return (nil, FlyErrors.notEnoughMoney)
        }
        // –ü–æ–∫—É–ø–∞–µ–º –±–∏–ª–µ—Ç
        myMoney -= myCountry.price
        var newCountry = myCountry
        newCountry.count -= 1
        countries[country] = newCountry
        print("I'm going to \(country)! ü•≥")
        return (newCountry.country, nil)
    }
}
// MARK: - instances
let myTrip = FlyFromRussia()

let myFirstTrip = myTrip.willIFly(country: "Germany", isCovidOkay: false)
let mySecondTrip = myTrip.willIFly(country: "Mexico", isCovidOkay: true)
let myThirdTrip = myTrip.willIFly(country: "Armenia", isCovidOkay: true)

if let country = myFirstTrip.0 {
    print("I'm going to \(country.name)! ü•≥")
} else if let error = myFirstTrip.1 {
    print("Error: \(error.localizedDescription)")
}


// MARK: - FlyFromRussiaThrows (–≤–∞—Ä–∏–∞–Ω—Ç —Å–æ throws)
final class FlyFromRussiaThrows {
// –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
var countries = [
    "Italy": Ticket(count: 0, price: 0, country: Country(name: "Italy")),
    "France": Ticket(count: 10, price: 800, country: Country(name: "France")),
    "Greece": Ticket(count: 15, price: 750, country: Country(name: "Greece")),
    "Turkey": Ticket(count: 78, price: 470, country: Country(name: "Spain")),
    "Germany": Ticket(count: 57, price: 640, country: Country(name: "Germany")),
    "Georgia": Ticket(count: 36, price: 540, country: Country(name: "Austria")),
    "Armenia": Ticket(count: 100, price: 400, country: Country(name: "Armenia")),
    "Mexico": Ticket(count: 0, price: 0, country: Country(name: "Mexico"))]
// –ö—É–¥–∞ –ª–µ—Ç–∏–º?
let country: String = ""
// –°–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –¥–µ–Ω–µ–≥
var myMoney = 600
// –°–Ω—è—Ç—ã –ª–∏ –∫–æ–≤–∏–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?
var isCovidOkay: Bool = false

    // –ü–æ–ª–µ—Ç–∏–º –ª–∏?
    func willIFly(country: String, isCovidOkay: Bool) throws -> Country {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≤–∏–¥–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        guard isCovidOkay else {
            print("There are covid restrictions in \(country).")
            throw FlyErrors.covidRestrictions
        }
        // –ï—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ
        guard let myCountry = countries[country] else {
            print("No information about \(country).")
            throw FlyErrors.unknownCountry
        }
        // –ï—Å—Ç—å –ª–∏ –±–∏–ª–µ—Ç—ã
        guard myCountry.count > 0 else {
            print("There are no tickets to \(country).")
            throw FlyErrors.noTickets
        }
        // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
        guard myMoney >= myCountry.price else {
            print("You don't have enough money for \(country).")
            throw FlyErrors.notEnoughMoney
        }
        // –ü–æ–∫—É–ø–∞–µ–º –±–∏–ª–µ—Ç
        myMoney -= myCountry.price
        var newCountry = myCountry
        newCountry.count -= 1
        countries[country] = newCountry
        print("I'm going to \(country)! ü•≥")
        return newCountry.country
    }
}

// MARK: - instances
let yourTrip = FlyFromRussiaThrows()
// –ü–æ–ø—ã—Ç–∫–∞ —É–ª–µ—Ç–µ—Ç—å –≤ –ì–µ—Ä–º–∞–Ω–∏—é
do {
    try yourTrip.willIFly(country: "Germany", isCovidOkay: false)
} catch FlyErrors.covidRestrictions {
    print("Covid restrictions")
} catch FlyErrors.unknownCountry {
    print("Unknown country")
} catch FlyErrors.noTickets {
    print("No tickets")
} catch FlyErrors.notEnoughMoney {
    print("Not enough money")
} catch let error {
    print(error.localizedDescription)
}
// –ü–æ–ø—ã—Ç–∫–∞ —É–ª–µ—Ç–µ—Ç—å –≤ –ê—Ä–º–µ–Ω–∏—é
do {
    try yourTrip.willIFly(country: "Armenia", isCovidOkay: true)
} catch FlyErrors.covidRestrictions {
    print("Covid restrictions")
} catch FlyErrors.unknownCountry {
    print("Unknown country")
} catch FlyErrors.noTickets {
    print("No tickets")
} catch FlyErrors.notEnoughMoney {
    print("Not enough money")
} catch let error {
    print(error.localizedDescription)
}
print(yourTrip.myMoney)

